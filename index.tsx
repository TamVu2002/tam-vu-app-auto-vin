
import React, { useState, useRef } from 'react';
import { createRoot } from 'react-dom/client';
import { GoogleGenAI } from '@google/genai';

const carModelOptions = {
  'vf3': 'VF 3',
  'vf5_plus': 'VF 5 Plus',
  'vf6_eco': 'VF 6 Eco',
  'vf6_plus': 'VF 6 Plus',
  'vf7_eco': 'VF 7 Eco',
  'vf7_plus': 'VF 7 Plus',
  'vf8_eco': 'VF 8 Eco',
  'vf8_plus': 'VF 8 Plus',
  'vf9_eco': 'VF 9 Eco',
  'vf9_plus': 'VF 9 Plus',
  'herio_green': 'Herio Green',
};

const contentStyleOptions = {
  'fomo': 'Vi·∫øt ki·ªÉu FOMO',
  'gay_soc': 'Vi·∫øt ki·ªÉu g√¢y s·ªëc',
  'chuan_ads': 'Vi·∫øt ki·ªÉu chu·∫©n Facebook Ads',
  'story_telling': 'Vi·∫øt ki·ªÉu story-telling (k·ªÉ chuy·ªán)',
  'bai_toan_kinh_te': 'Vi·∫øt ki·ªÉu b√†i to√°n kinh t·∫ø',
  'so_sanh': 'Vi·∫øt ki·ªÉu so s√°nh v·ªõi xe c√πng t·∫ßm gi√°',
  'so_sanh_phan_khuc': 'Vi·∫øt ki·ªÉu so s√°nh v·ªõi xe c√πng ph√¢n kh√∫c',
};

const contentLengthOptions = {
  'ngan_gon': 'Vi·∫øt ng·∫Øn g·ªçn',
  'dai': 'Vi·∫øt d√†i',
};

const postLocationOptions = {
  'tiktok': 'ƒêƒÉng content TikTok',
  'facebook_profile': 'ƒêƒÉng content l√™n Facebook (c√° nh√¢n)',
  'facebook_groups': 'ƒêƒÉng content l√™n Facebook (h·ªôi nh√≥m VinFast)',
  'facebook_fanpage': 'ƒêƒÉng content l√™n Fanpage (b√°n h√†ng)',
};

const ContentGenerator = () => {
  const [carModel, setCarModel] = useState(Object.keys(carModelOptions)[0]);
  const [contentStyle, setContentStyle] = useState(Object.keys(contentStyleOptions)[0]);
  const [contentLength, setContentLength] = useState(Object.keys(contentLengthOptions)[0]);
  const [postLocation, setPostLocation] = useState(Object.keys(postLocationOptions)[0]);


  const [isLoading, setIsLoading] = useState(false);
  const [generatedPost, setGeneratedPost] = useState('');
  const [error, setError] = useState('');

  const handleGeneratePost = async () => {
    setError('');
    setIsLoading(true);
    setGeneratedPost('');

    try {
      const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
      const prompt = `
        B·∫°n l√† m·ªôt chuy√™n gia marketing m·∫°ng x√£ h·ªôi, chuy√™n t·∫°o n·ªôi dung viral cho VinFast tr√™n Facebook v√† TikTok.

        Nhi·ªám v·ª•: T·∫°o m·ªôt b√†i ƒëƒÉng d·ª±a tr√™n c√°c l·ª±a ch·ªçn sau:
        - M·∫´u xe: ${carModelOptions[carModel]}
        - Phong c√°ch content: ${contentStyleOptions[contentStyle]}
        - ƒê·ªô d√†i: ${contentLengthOptions[contentLength]}
        - N∆°i ƒëƒÉng b√†i: ${postLocationOptions[postLocation]}

        H∆∞·ªõng d·∫´n chi ti·∫øt cho t·ª´ng n∆°i ƒëƒÉng:
        - N·∫øu ƒëƒÉng l√™n "TikTok": Vi·∫øt d∆∞·ªõi d·∫°ng k·ªãch b·∫£n video ng·∫Øn. Bao g·ªìm (1) √ù t∆∞·ªüng h√¨nh ·∫£nh/c·∫£nh quay, (2) L·ªùi tho·∫°i ho·∫∑c vƒÉn b·∫£n tr√™n m√†n h√¨nh, (3) G·ª£i √Ω nh·∫°c n·ªÅn trendy, v√† (4) C√°c hashtag #vinfast #xeƒëi·ªán #tiktokvinfast.
        - N·∫øu ƒëƒÉng l√™n "Facebook (c√° nh√¢n)": Vi·∫øt v·ªõi gi·ªçng vƒÉn t·ª± nhi√™n, th√¢n thi·ªán, nh∆∞ ƒëang chia s·∫ª m·ªôt tr·∫£i nghi·ªám ho·∫∑c c·∫£m x√∫c c√° nh√¢n.
        - N·∫øu ƒëƒÉng l√™n "Facebook (h·ªôi nh√≥m VinFast)": Vi·∫øt nh∆∞ m·ªôt th√†nh vi√™n c·ªßa nh√≥m, t·∫≠p trung v√†o c√°c chi ti·∫øt k·ªπ thu·∫≠t ho·∫∑c tr·∫£i nghi·ªám s·ª≠ d·ª•ng c·ª• th·ªÉ, ƒë·∫∑t c√¢u h·ªèi m·ªü ƒë·ªÉ khuy·∫øn kh√≠ch c√°c th√†nh vi√™n kh√°c th·∫£o lu·∫≠n v√† chia s·∫ª kinh nghi·ªám.
        - N·∫øu ƒëƒÉng l√™n "Fanpage (b√°n h√†ng)": Vi·∫øt v·ªõi gi·ªçng vƒÉn chuy√™n nghi·ªáp, n√™u b·∫≠t l·ª£i √≠ch v√† ∆∞u ƒë√£i. Lu√¥n k·∫øt th√∫c b·∫±ng m·ªôt l·ªùi k√™u g·ªçi h√†nh ƒë·ªông (Call To Action) m·∫°nh m·∫Ω nh∆∞ "üëâ Nh·∫≠n b√°o gi√° ngay!", "üìû Li√™n h·ªá hotline...", ho·∫∑c " showroom g·∫ßn nh·∫•t!".

        Quy t·∫Øc B·∫ÆT BU·ªòC:
        1. Vi·∫øt b·∫±ng ti·∫øng Vi·ªát.
        2. B·∫ÆT BU·ªòC s·ª≠ d·ª•ng R·∫§T NHI·ªÄU bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c (emoji) th√∫ v·ªã, ph√π h·ª£p v·ªõi n·ªôi dung ƒë·ªÉ b√†i vi·∫øt c·ª±c k·ª≥ sinh ƒë·ªông v√† thu h√∫t. üöóüí®‚ö°Ô∏èüîãüå≥
        3. TUY·ªÜT ƒê·ªêI KH√îNG s·ª≠ d·ª•ng ch·ªØ in ƒë·∫≠m ho·∫∑c b·∫•t k·ª≥ ƒë·ªãnh d·∫°ng markdown n√†o (v√≠ d·ª•: kh√¥ng d√πng **ch·ªØ** ho·∫∑c *ch·ªØ*). To√†n b·ªô vƒÉn b·∫£n ph·∫£i ·ªü d·∫°ng thu·∫ßn t√∫y, kh√¥ng ƒë·ªãnh d·∫°ng.
        4. Mang ƒë·∫≠m phong c√°ch v√† tinh th·∫ßn c·ªßa th∆∞∆°ng hi·ªáu VinFast: ti√™n phong, ƒë·∫≥ng c·∫•p, c√¥ng ngh·ªá v√† v√¨ m·ªôt t∆∞∆°ng lai xanh.
        5. T·ªëi ∆∞u cho thu·∫≠t to√°n c·ªßa n·ªÅn t·∫£ng ƒë√£ ch·ªçn.
        
        H√£y b·∫Øt ƒë·∫ßu vi·∫øt.
      `;
      
      const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
      });

      setGeneratedPost(response.text);
    } catch (apiError) {
      console.error('API call failed:', apiError);
      setError('T·∫°o b√†i vi·∫øt th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v√† API key c·ªßa b·∫°n.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleCopyText = () => {
    if (generatedPost) {
      navigator.clipboard.writeText(generatedPost)
        .then(() => alert('ƒê√£ sao ch√©p b√†i vi·∫øt!'))
        .catch(err => console.error('Failed to copy:', err));
    }
  };

  const handleShareOnFacebook = () => {
    if (generatedPost) {
      const encodedQuote = encodeURIComponent(generatedPost);
      const shareUrl = `https://www.facebook.com/sharer/sharer.php?u=https://vinfastauto.com&quote=${encodedQuote}`;
      window.open(shareUrl, '_blank', 'noopener,noreferrer');
    }
  };

  const handleReset = () => {
    setCarModel(Object.keys(carModelOptions)[0]);
    setContentStyle(Object.keys(contentStyleOptions)[0]);
    setContentLength(Object.keys(contentLengthOptions)[0]);
    setPostLocation(Object.keys(postLocationOptions)[0]);
    setGeneratedPost('');
    setError('');
  };

  return (
    <>
      <section className="input-section">
        <div className="option-group">
          <label htmlFor="car-model-select">1. Ch·ªçn m·∫´u xe</label>
          <div className="select-wrapper">
            <select id="car-model-select" value={carModel} onChange={(e) => setCarModel(e.target.value)}>
              {Object.entries(carModelOptions).map(([key, value]) => (
                <option key={key} value={key}>{value}</option>
              ))}
            </select>
          </div>
        </div>
        
        <div className="option-group">
          <label htmlFor="content-style-select">2. Ch·ªçn phong c√°ch content</label>
          <div className="select-wrapper">
            <select id="content-style-select" value={contentStyle} onChange={(e) => setContentStyle(e.target.value)}>
              {Object.entries(contentStyleOptions).map(([key, value]) => (
                <option key={key} value={key}>{value}</option>
              ))}
            </select>
          </div>
        </div>

        <div className="option-group">
          <label htmlFor="content-length-select">3. Ch·ªçn ƒë·ªô d√†i</label>
          <div className="select-wrapper">
            <select id="content-length-select" value={contentLength} onChange={(e) => setContentLength(e.target.value)}>
              {Object.entries(contentLengthOptions).map(([key, value]) => (
                <option key={key} value={key}>{value}</option>
              ))}
            </select>
          </div>
        </div>

        <div className="option-group">
          <label htmlFor="post-location-select">4. Ch·ªçn n∆°i ƒëƒÉng b√†i</label>
          <div className="select-wrapper">
            <select id="post-location-select" value={postLocation} onChange={(e) => setPostLocation(e.target.value)}>
              {Object.entries(postLocationOptions).map(([key, value]) => (
                <option key={key} value={key}>{value}</option>
              ))}
            </select>
          </div>
        </div>

        <button 
          className="generate-btn"
          onClick={handleGeneratePost} 
          disabled={isLoading}
          aria-busy={isLoading}
        >
          {isLoading ? 'ƒêang t·∫°o...' : <><span className="button-icon">‚ú®</span> T·∫°o B√†i Vi·∫øt</>}
        </button>
      </section>

      {error && <p className="error-message">{error}</p>}

      <section className="output-section" aria-live="polite">
        <h2>K·∫øt Qu·∫£ Do AI C·ªßa T√¢m V≈© VinFast T·∫°o üòòüòòüòò</h2>
        {isLoading ? (
          <div className="loader-container">
            <div className="loader" role="status" aria-label="ƒêang t·∫£i n·ªôi dung"></div>
          </div>
        ) : (
          <>
            <p className={`generated-post ${!generatedPost && 'placeholder-text'}`}>
              {generatedPost || 'B√†i vi·∫øt c·ªßa b·∫°n s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y...'}
            </p>
            {generatedPost && (
              <div className="action-buttons">
                <button className="copy-btn" onClick={handleCopyText}>
                  <span className="button-icon">üìã</span> Sao ch√©p
                </button>
                <button className="share-btn" onClick={handleShareOnFacebook}>
                  <span className="button-icon">üëç</span> Chia s·∫ª l√™n Facebook
                </button>
                <button className="reset-btn" onClick={handleReset}>
                  <span className="button-icon">üìù</span> Vi·∫øt B√†i M·ªõi
                </button>
              </div>
            )}
          </>
        )}
      </section>
    </>
  );
};

const ImageAnalyzer = () => {
    const [inputType, setInputType] = useState('upload');
    const [imageFile, setImageFile] = useState(null);
    const [imageUrl, setImageUrl] = useState('');
    const [imagePreview, setImagePreview] = useState('');
    const [promptText, setPromptText] = useState('Ph√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† m√¥ t·∫£ chi ti·∫øt nh·ªØng g√¨ b·∫°n th·∫•y. N·∫øu c√≥ vƒÉn b·∫£n trong ·∫£nh, h√£y tr√≠ch xu·∫•t n√≥.');
    const [result, setResult] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');
    const fileInputRef = useRef(null);


    // FIX: reader.result is `string | ArrayBuffer`, but `split` only exists on `string`. Added a type check to handle this and added proper promise rejection.
    const fileToGenerativePart = async (file) => {
        const base64EncodedDataPromise = new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onloadend = () => {
                if (typeof reader.result === 'string') {
                    resolve(reader.result.split(',')[1]);
                } else {
                    reject(new Error("Failed to read file as data URL"));
                }
            };
            reader.onerror = (error) => reject(error);
            reader.readAsDataURL(file);
        });
        return {
            inlineData: { data: await base64EncodedDataPromise, mimeType: file.type }
        };
    };

    const handleFileChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            if (file.size > 4 * 1024 * 1024) { // 4MB limit
                setError('T·ªáp ·∫£nh qu√° l·ªõn. Vui l√≤ng ch·ªçn t·ªáp nh·ªè h∆°n 4MB.');
                return;
            }
            setError('');
            setImageFile(file);
            const reader = new FileReader();
            reader.onloadend = () => {
                setImagePreview(reader.result as string);
            };
            reader.readAsDataURL(file);
        }
    };
    
    const handleUrlChange = (e) => {
        setImageUrl(e.target.value);
        setImagePreview(e.target.value); // Optimistically show preview
    };

    const handleAnalyze = async () => {
        if ((inputType === 'upload' && !imageFile) || (inputType === 'url' && !imageUrl)) {
            setError('Vui l√≤ng cung c·∫•p m·ªôt h√¨nh ·∫£nh ƒë·ªÉ ph√¢n t√≠ch.');
            return;
        }

        setError('');
        setIsLoading(true);
        setResult('');

        try {
            const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
            let imagePart;

            if (inputType === 'upload' && imageFile) {
                imagePart = await fileToGenerativePart(imageFile);
            } else if (inputType === 'url' && imageUrl) {
                 try {
                    const response = await fetch(imageUrl);
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    const blob = await response.blob();
                    const reader = new FileReader();
                    // FIX: reader.result is `string | ArrayBuffer`, but `split` only exists on `string`. Added a type check to handle this.
                    const base64 = await new Promise((resolve, reject) => {
                        reader.onloadend = () => {
                            if (typeof reader.result === 'string') {
                                resolve(reader.result.split(',')[1]);
                            } else {
                                reject(new Error("Failed to read blob as data URL"));
                            }
                        };
                        reader.onerror = reject;
                        reader.readAsDataURL(blob);
                    });
                    imagePart = { inlineData: { data: base64, mimeType: blob.type } };
                } catch (fetchError) {
                    console.error("Failed to fetch image from URL:", fetchError);
                    throw new Error('Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh t·ª´ URL. ƒêi·ªÅu n√†y c√≥ th·ªÉ do l·ªói CORS. Vui l√≤ng th·ª≠ t·∫£i ·∫£nh xu·ªëng v√† t·∫£i l√™n tr·ª±c ti·∫øp.');
                }
            }
            
            if (!imagePart) {
              throw new Error("Kh√¥ng th·ªÉ x·ª≠ l√Ω h√¨nh ·∫£nh.");
            }
            
            const finalPrompt = `${promptText}\n\nQuy t·∫Øc B·∫ÆT BU·ªòC: TUY·ªÜT ƒê·ªêI KH√îNG s·ª≠ d·ª•ng ch·ªØ in ƒë·∫≠m ho·∫∑c b·∫•t k·ª≥ ƒë·ªãnh d·∫°ng markdown n√†o (v√≠ d·ª•: kh√¥ng d√πng **ch·ªØ** ho·∫∑c *ch·ªØ*). To√†n b·ªô vƒÉn b·∫£n ph·∫£i ·ªü d·∫°ng thu·∫ßn t√∫y, kh√¥ng ƒë·ªãnh d·∫°ng.`;
            const contents = { parts: [{ text: finalPrompt }, imagePart] };

            const response = await ai.models.generateContent({
                model: 'gemini-2.5-flash',
                contents: contents,
            });
            
            setResult(response.text);
        } catch (apiError) {
            console.error('API call failed:', apiError);
            setError(apiError.message || 'Ph√¢n t√≠ch h√¨nh ·∫£nh th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setIsLoading(false);
        }
    };

    const handleCopyText = () => {
        if (result) {
            navigator.clipboard.writeText(result)
                .then(() => alert('ƒê√£ sao ch√©p k·∫øt qu·∫£!'))
                .catch(err => console.error('Failed to copy:', err));
        }
    };

    const handleReset = () => {
        setImageFile(null);
        setImageUrl('');
        setImagePreview('');
        setPromptText('Ph√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† m√¥ t·∫£ chi ti·∫øt nh·ªØng g√¨ b·∫°n th·∫•y. N·∫øu c√≥ vƒÉn b·∫£n trong ·∫£nh, h√£y tr√≠ch xu·∫•t n√≥.');
        setResult('');
        setError('');
        if (fileInputRef.current) {
            fileInputRef.current.value = null;
        }
    };
    
    return (
        <div className="image-analyzer-container">
            <div className="input-method-selector">
                <button className={`input-method-btn ${inputType === 'upload' ? 'active' : ''}`} onClick={() => setInputType('upload')}>
                    <span className="button-icon">üìÅ</span> T·∫£i ·∫£nh l√™n
                </button>
                <button className={`input-method-btn ${inputType === 'url' ? 'active' : ''}`} onClick={() => setInputType('url')}>
                    <span className="button-icon">üîó</span> D√°n URL
                </button>
            </div>

            <div className="image-input-area">
                {inputType === 'upload' ? (
                    <>
                        <input type="file" id="imageUpload" accept="image/*" onChange={handleFileChange} ref={fileInputRef} />
                        <label htmlFor="imageUpload">
                            {imageFile ? `ƒê√£ ch·ªçn: ${imageFile.name}` : 'Nh·∫•p ƒë·ªÉ ch·ªçn ho·∫∑c k√©o th·∫£ ·∫£nh v√†o ƒë√¢y'}
                        </label>
                    </>
                ) : (
                    <input 
                        type="text" 
                        className="url-input" 
                        placeholder="D√°n URL h√¨nh ·∫£nh v√†o ƒë√¢y..." 
                        value={imageUrl} 
                        onChange={handleUrlChange} 
                    />
                )}
            </div>

            {imagePreview && (
                <div className="image-preview-container">
                    <img src={imagePreview} alt="Xem tr∆∞·ªõc h√¨nh ·∫£nh" className="image-preview" />
                </div>
            )}
            
            <div className="option-group">
              <label htmlFor="prompt-input">Y√™u c·∫ßu (Prompt)</label>
              <textarea 
                id="prompt-input"
                className="prompt-input" 
                rows="3"
                value={promptText} 
                onChange={(e) => setPromptText(e.target.value)}
              />
            </div>

            <button className="generate-btn analyze-btn" onClick={handleAnalyze} disabled={isLoading}>
                {isLoading ? 'ƒêang ph√¢n t√≠ch...' : <><span className="button-icon">üîé</span> Ph√¢n T√≠ch H√¨nh ·∫¢nh</>}
            </button>

            {error && <p className="error-message">{error}</p>}

            <section className="output-section" aria-live="polite">
                <h2>K·∫øt Qu·∫£ Ph√¢n T√≠ch</h2>
                {isLoading ? (
                    <div className="loader-container">
                        <div className="loader"></div>
                    </div>
                ) : (
                    <>
                        <p className={`generated-post ${!result && 'placeholder-text'}`}>
                            {result || 'K·∫øt qu·∫£ ph√¢n t√≠ch h√¨nh ·∫£nh s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y...'}
                        </p>
                        {result && (
                            <div className="action-buttons">
                                <button className="copy-btn" onClick={handleCopyText}>
                                    <span className="button-icon">üìã</span> Sao ch√©p
                                </button>
                                <button className="reset-btn" onClick={handleReset}>
                                  <span className="button-icon">üìù</span> Ph√¢n T√≠ch ·∫¢nh M·ªõi
                                </button>
                            </div>
                        )}
                    </>
                )}
            </section>
        </div>
    );
};

const TikTokDownloader = () => {
    const [url, setUrl] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isDownloading, setIsDownloading] = useState(false);
    const [error, setError] = useState('');
    const [result, setResult] = useState(null);

    const handleApiCall = async () => {
        if (!url || !url.includes('tiktok.com')) {
            setError('Vui l√≤ng nh·∫≠p m·ªôt link TikTok h·ª£p l·ªá.');
            return;
        }

        setError('');
        setIsLoading(true);
        setResult(null);

        try {
            // Using a public API for TikTok video downloading.
            // This is necessary because of CORS and server-side processing requirements.
            const response = await fetch(`https://www.tikwm.com/api/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
                },
                body: `url=${encodeURIComponent(url)}`
            });

            if (!response.ok) {
                throw new Error('Y√™u c·∫ßu ƒë·∫øn m√°y ch·ªß t·∫£i xu·ªëng th·∫•t b·∫°i.');
            }

            const data = await response.json();
            
            // FIX: The type of data.code from the API might be inconsistent (number or string).
            // To handle this robustly and avoid potential type errors with strict linters,
            // we explicitly convert to a String and use strict inequality.
            if (String(data.code) !== '0') {
                throw new Error(data.msg || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω video t·ª´ link n√†y.');
            }
            
            setResult({
                downloadUrl: data.data.play,
                thumbnailUrl: data.data.cover,
                title: data.data.title,
            });

        } catch (apiError) {
            console.error('TikTok download failed:', apiError);
            setError(apiError.message || 'ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setIsLoading(false);
        }
    };

    const handleDirectDownload = async () => {
        if (!result || !result.downloadUrl) return;

        setIsDownloading(true);
        setError('');

        try {
            const response = await fetch(result.downloadUrl);
            if (!response.ok) {
                throw new Error('Kh√¥ng th·ªÉ t·∫£i t·ªáp video t·ª´ m√°y ch·ªß.');
            }

            const blob = await response.blob();
            const objectUrl = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = objectUrl;
            
            const fileName = result.title ? `${result.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.mp4` : 'tiktok_video.mp4';
            a.download = fileName;
            
            document.body.appendChild(a);
            a.click();
            
            // Cleanup
            URL.revokeObjectURL(objectUrl);
            document.body.removeChild(a);

        } catch (downloadError) {
            console.error('Direct download failed:', downloadError);
            setError('T·∫£i tr·ª±c ti·∫øp th·∫•t b·∫°i. Video s·∫Ω ƒë∆∞·ª£c m·ªü trong tab m·ªõi ƒë·ªÉ b·∫°n c√≥ th·ªÉ t·∫£i th·ªß c√¥ng.');
            // Fallback to opening in a new tab
            window.open(result.downloadUrl, '_blank');
        } finally {
            setIsDownloading(false);
        }
    };

    const handleReset = () => {
        setUrl('');
        setError('');
        setResult(null);
    };

    return (
        <div className="tiktok-downloader-container">
            <div className="url-input-group">
                <label htmlFor="tiktok-url-input">Link Video TikTok</label>
                <input
                    id="tiktok-url-input"
                    type="text"
                    className="url-input"
                    placeholder="D√°n link video TikTok v√†o ƒë√¢y, v√≠ d·ª•: https://www.tiktok.com/@username/video/123..."
                    value={url}
                    onChange={(e) => setUrl(e.target.value)}
                    disabled={isLoading}
                />
            </div>

            <button className="generate-btn" onClick={handleApiCall} disabled={isLoading}>
                {isLoading ? 'ƒêang x·ª≠ l√Ω...' : <><span className="button-icon">üì•</span> T·∫£i Video</>}
            </button>
            
            {error && <p className="error-message">{error}</p>}
            
            {isLoading && (
                <div className="loader-container">
                    <div className="loader"></div>
                </div>
            )}

            {result && (
                <section className="output-section tiktok-result-card">
                    <img src={result.thumbnailUrl} alt="Video thumbnail" className="tiktok-thumbnail" />
                    <h3 className="tiktok-title">{result.title}</h3>
                    <div className="action-buttons">
                         <button
                            className="download-video-btn"
                            onClick={handleDirectDownload}
                            disabled={isDownloading}
                        >
                            {isDownloading ? 'ƒêang t·∫£i...' : (
                                <>
                                    <span className="button-icon">‚úÖ</span> T·∫£i xu·ªëng (Kh√¥ng logo)
                                </>
                            )}
                        </button>
                        <button className="reset-btn" onClick={handleReset}>
                            <span className="button-icon">üîÑ</span> T·∫£i video kh√°c
                        </button>
                    </div>
                </section>
            )}
        </div>
    );
};


const App = () => {
  const [activeTab, setActiveTab] = useState('content');

  const renderContent = () => {
    switch (activeTab) {
      case 'content':
        return <ContentGenerator />;
      case 'image':
        return <ImageAnalyzer />;
      case 'tiktok':
        return <TikTokDownloader />;
      default:
        return <ContentGenerator />;
    }
  };

  return (
    <div className="app-container">
      <header>
        <h1>T√¢m V≈© VinFast - L√†o g√¨ c≈©ng t√¥n !!!</h1>
        <p className="subtitle">Trai ƒê·∫πp C·ªßa Ph√≤ng Kinh Doanh 1 - VinFast Kim Giang !</p>
         <nav className="tab-nav">
            <button
              className={`tab-btn ${activeTab === 'content' ? 'active' : ''}`}
              onClick={() => setActiveTab('content')}
              aria-pressed={activeTab === 'content'}
            >
              <span className="button-icon">‚úçÔ∏è</span> T·∫°o Content Ch·ªØ
            </button>
            <button
              className={`tab-btn ${activeTab === 'image' ? 'active' : ''}`}
              onClick={() => setActiveTab('image')}
              aria-pressed={activeTab === 'image'}
            >
              <span className="button-icon">üñºÔ∏è</span> Ph√¢n T√≠ch H√¨nh ·∫¢nh
            </button>
             <button
              className={`tab-btn ${activeTab === 'tiktok' ? 'active' : ''}`}
              onClick={() => setActiveTab('tiktok')}
              aria-pressed={activeTab === 'tiktok'}
            >
              <span className="button-icon">üé•</span> T·∫£i Video TikTok
            </button>
          </nav>
      </header>
      <main>
        {renderContent()}
      </main>
      <footer>
        <p className="disclaimer">
          <strong>L∆∞u √Ω:</strong> ƒê√¢y l√† app chuy√™n v·ªÅ l√†m content xe √î t√¥ ƒëi·ªán VinFast do V≈© ƒê·ª©c T√¢m ph√°t tri·ªÉn, d·ª± √°n l√† phi l·ª£i nhu·∫≠n.
        </p>
      </footer>
    </div>
  );
};

const container = document.getElementById('root');
const root = createRoot(container!);
root.render(<App />);
